openapi: 3.0.0
info:
  description: Safekeeper
  version: 1.0.0
  title:  Safekeeper Service
  contact:
    email: kiennt9696@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: alive
    description: Keepalive
  - name: access control
    description: access management using OAUTH2 and RBAC
paths:
  /:
    get:
      tags:
        - alive
      summary: Api keepalive
      description: Api keepalive
      operationId: safekeeper.app.index
      responses:
        "200":
          description: Home page
          content:
            text/html:
              schema:
                type: string
  /ping:
    get:
      tags:
        - alive
      summary: Api keepalive
      description: Api keepalive
      operationId: safekeeper.controllers.healthz.is_alive
      responses:
        "200":
          description: is alive

  /permission:
    options:
      summary: CORS Preflight
      description: Handles preflight requests
      operationId: safekeeper.controllers.preflight.permission_preflight
      parameters: [ ]
      responses:
        "204":
          description: Preflight successful
    get:
      tags:
        - "access control"
      summary: "Get permission of current user"
      operationId: "safekeeper.controllers.access_control.get_permission"
      security:
        - jwt: [ ]
      responses:
        401:
          description: "Unauthorized Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError401"
  /authorize:
    options:
      summary: CORS Preflight
      description: Handles preflight requests
      operationId: safekeeper.controllers.preflight.authorize_preflight
      parameters: [ ]
      responses:
        "204":
          description: Preflight successful
    post:
      tags:
        - "access control"
      summary: "Get access token using session token"
      operationId: "safekeeper.controllers.access_control.get_access_token"
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: "client id"
                  example: "client_id"
                scopes:
                  type: string
                  description: "Scopes to grant permissions"
                  example: "read:task"
      responses:
        401:
          description: "Unauthorized Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError401"

components:
  securitySchemes:
    jwt:
      type: oauth2
      x-tokenInfoUrl: http://localhost:7979/tokeninfo
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth2/dialog
          scopes:
            uid: Unique identifier of the user accessing the service.
      x-tokenInfoFunc: safekeeper.middlewares.token_validator.validate_token
  schemas:
    ApiResponseError401:
      type: object
      properties:
        error:
          type: string
          description: "Error message describing the unauthorized request."
        code:
          type: integer
          description: "Error code."

servers:
  - url: http://0.0.0.0:8081/v1